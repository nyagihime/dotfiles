# 参考にしたやつ
# https://qiita.com/nl0_blu/items/9d207a70ccc8467f7bab
# https://qiita.com/koara-local/items/940ce66e2ecd8e4d8582
# https://github.com/koara-local/dotfiles
# https://github.com/altercation/solarized/blob/master/tmux/tmuxcolors-dark.conf
# -----------------------------------------------

# 設定が壊れたりしてうまく色やメッセージが反映しなくなったら、
# `tmux kill-server`
# でリセットできる

#### COLOUR
# 256色表示にする
set-option -g default-terminal screen-256color
set -g terminal-overrides 'xterm:colors=256'

# 配色設定。色番号を指定する場合は color123 じゃなくて colour123 (colo'u'r) なことに注意
# 色番号は bin/colortest.sh で確認
# tmux 上でお試しする場合は `tmux set status-style bg=colour236` のように入れる。
# -----------------------------------------------
# status line
# default status line colors
set -g status-style bg=colour236
# message screen
set -g message-style bg=colour32

# window
# active window title
set -w -g window-status-current-style fg=colour197
set -w -g window-status-style fg=colour242

# pane style
# 非アクティブなペインの文字を薄くしてアクティブなペインを目立たせる
# 先にデフォルトスタイルで全体の色を薄くしてから、アクティブなペイン用のスタイルを上書きする
# このとき、default は window-style に揃うようで、あとから fg=default としてもデフォルトの文字色にならないっぽい？
set -w -g window-style fg=colour242
set -w -g window-active-style fg=colour250

# clock mode (Prefix+T)
set -g -w clock-mode-colour colour152

# pane
# non-active pane border
set -g pane-border-style fg=colour242
# active pane border
set -g pane-active-border-style fg=colour230

# others
# 選択範囲や、コピーモード時の右上のカウンターの配色
set -w -g mode-style fg=colour232,bg=colour187
#### END COLOUR SETTINGS

# tmux のデフォルトシェル
set-option -g default-shell /bin/zsh

# prefix キーをC-bからC-wに変更
set -g prefix C-w
unbind-key C-b

# prefix + r で設定ファイルをリロードできるようにする
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# ESC キーのタイムラグを無くす
set -s escape-time 0

# tmux の history サイズを変更
set-option -g history-limit 3000

setw -g allow-rename on
set-option -g set-titles on
set-option -g set-titles-string "#T #{session_alerts}"

# ステータスバー関連
# ステータスバー（ステータスライン）で利用できる特殊文字列
#   #(shell command) コマンドの出力の最初の行
#   #[attributes] 色や属性の変更
#   #H            ローカルホストのホスト名
#   #h            ローカルホストのドメイン名を除いたホスト名
#   #I            カレントウィンドウのインデックス
#   #D            カレントペインの識別子
#   #P            カレントペインのインデックス
#   #S            セッション名
#   #T            カレントペイン名
#   #W            カレントウィンドウ名
#   ##            「#」の文字（エスケープ処理）
# 時計メモ：%Y:年 %m:月 %d:日 %a:曜日 %H:時 %M:分 %S:秒
# -----------------
# ステータスバーを１秒毎に再描画
set-option -g status-interval 1

# ウィンドウリストのテキスト位置
set-option -g status-justify left

# ステータスバーの位置
set-option -g status-position top

# 左パネル
set-option -g status-left-length 50
set -g status-left \
"#[bg=colour39 fg=colour255] #{?client_prefix,#[reverse],}[#S:#I.#P] #[bg=default fg=colour39]#[default]  "
# "#{?client_prefix,#[reverse],}#[fg=green][#S:#I.#P]#[fg=yellow][#(whoami)@#h]  "
# set-option -g status-left '#H:[#P]'

# 右パネル
set -g status-right-length 120
set -g status-right \
"#(${HOME}/dotfiles/bin/show_vcs_info)"\
"#(${HOME}/dotfiles/bin/get_wifi_info --lv-only)#[default]"\
"#(${HOME}/dotfiles/bin/get_battery_info)"\
"#[fg=colour245]  %a %d %b %H:%M:%S"\
"#[default]"

# ペイン操作
# -----------------
# vim の← (h)↓ (j)↑ (k) → (l)でペインを移動
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# vim の← (h)↓ (j)↑ (k) → (l) の大文字長押し（Shift+キー）でペインのサイズを変更
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# (プレフィックスなしで) Shift + カーソルキーでペイン移動
bind -n S-left select-pane -L
bind -n S-down select-pane -D
bind -n S-up select-pane -U
bind -n S-right select-pane -R

# Prefix + ←、→でウィンドウ移動
# todo ただ、連続で移動できないので変えても良いかも
bind right select-window -n
bind left select-window -p

# Prefix + Shift + カーソルキー長押しでペインサイズ変更
# bind -r S-left select-pane -L 5
# bind -r S-down select-pane -D 5
# bind -r S-up select-pane -U 5
# bind -r S-right select-pane -R 5


# ペイン操作
# -----------------
# \ でペインを縦分割
# - でペインを横分割

bind \ split-window -h
bind - split-window -v

# tmux 1.9 以上 なら、分割後のペインは分割前と同じ場所に自動で移動するようオーバーライド
if-shell "${HOME}/dotfiles/bin/tmux-version-check 1.9" '\
	bind c new-window -c "#{pane_current_path}";\
	bind \ split-window -h -c "#{pane_current_path}";\
	bind - split-window -v -c "#{pane_current_path}";\
'

# ウィンドウを閉じた時に番号を詰める
if-shell -b '[ "$(echo "$TMUX_VERSION >= 1.7" | bc)" = 1 ]' '\
	set-option -g renumber-windows on; \
'

# セッションの作成 / 破棄のタイミングで数字のみのセッション名を割り当て直す（セッション番号歯抜け防止）
# renumber-sessions みたいなコマンドはないらしく、作る予定もないというので自分で作る必要がある
# （セッションの作成・破棄のタイミングにフックがある）
# 詳しくは https://endaaman.me/tips/tmux-renumber-session
set-hook -g session-created "run ~/dotfiles/bin/tmux-renumber-sessions"
set-hook -g session-closed "run ~/dotfiles/bin/tmux-renumber-sessions"

# ctrl + [ / ctrl + ] でウィンドウ移動（プレフィックスなし）
# bind-key -n C-[ previous-window
# bind-key -n C-] next-window

# clock
set-window-option -g clock-mode-colour green #green

# ペイン番号やウィンドウ番号を1オリジンにする
set-option -g base-index 1
set-window-option -g pane-base-index 1

# マウス操作を有効にする
set-option -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"


# ペインのタイトルの表示
# タイトル自体は `tmux select-pane -T 'pane name`
# または、iTerm2 なら自作コマンドの `tabname pane name`が使える
set -g pane-border-status bottom
set -g pane-border-format " #{pane_index} : #T "

# コピーモードを設定する
# --------------------
# Vimキーバインドでできるようにする
setw -g mode-keys vi

# 'v' で選択を始める
bind -T copy-mode-vi v send -X begin-selection
# 'V' で行選択
bind -T copy-mode-vi V send -X select-line
# 'C-v' で矩形選択
bind -T copy-mode-vi C-v send -X rectangle-toggle

# 'y' でヤンク
bind -T copy-mode-vi y send -X copy-selection
# 'Y' で行ヤンク
bind -T copy-mode-vi Y send -X copy-line

# 選択範囲を pbcopy に流して OS のクリップボードにセットする
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "tmux save-buffer -| pbcopy"
bind-key -T copy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel "tmux save-buffer -| pbcopy"

# 'C-p'でペースト
bind-key C-p paste-buffer


#===================================
# tpm - Tmux Plugin Manager
#===================================

# Plugins
set -g @plugin 'tmux-plugins/tpm'

# セッションの自動保存・復元
set -g @plugin 'tmux-plugins/tmux-resurrect'  # Prefix + Ctrl-s でセッション保存 Prefix + Ctrl-r でセッションリロード
set -g @plugin 'tmux-plugins/tmux-continuum'
  set -g @continuum-restore 'on'              # tmux スタート時に自動で復元
  set -g @continuum-save-interval '1'         # セッションを保存する間隔を 1 分にする

# Initialize TMUX plugin manager
# (keep this line at the very bottom of tmux.conf)
# tpm 本体だけは git で持ち込む必要がある
#   https://github.com/tmux-plugins/tpm
run '~/dotfiles/tmux/plugins/tpm/tpm'
